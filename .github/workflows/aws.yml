name: Security Scan with SOAR Containment
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: uba-ds-validator
  SOAR_API_URL: https://your-soar-platform.com/api/v1  # Update with your SOAR URL

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker Image Security Scan
      - name: Scan with Anchore
        id: anchore-scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          fail-build: false  # We'll handle failures manually
          severity-cutoff: low  # Report all findings but only act on critical

      # Process scan results
      - name: Analyze Scan Results
        id: analyze-scan
        run: |
          # Extract critical vulnerabilities count
          CRITICAL_COUNT=$(jq '.results[0].vulnerabilities[] | select(.severity == "Critical") | .vuln' <<< '${{ steps.anchore-scan.outputs.scan-results }}' | wc -l)
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "Found $CRITICAL_COUNT critical vulnerabilities"

          # Fail only if critical vulnerabilities exist
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Critical vulnerabilities found!"
            exit 1
          fi

      # SOAR Integration for Critical Vulnerabilities
      - name: Trigger SOAR Containment
        if: steps.analyze-scan.outputs.critical_count > 0
        env:
          SOAR_API_KEY: ${{ secrets.SOAR_API_KEY }}
        run: |
          # Format the containment request
          CONTAINMENT_PAYLOAD=$(jq -n \
            --arg image "${{ env.ECR_REPOSITORY }}" \
            --arg count "${{ steps.analyze-scan.outputs.critical_count }}" \
            --arg scan_results "${{ steps.anchore-scan.outputs.scan-results }}" \
            '{
              "action": "contain",
              "target_type": "container_image",
              "target": $image,
              "parameters": {
                "severity": "critical",
                "vulnerability_count": $count,
                "scan_results": ($scan_results | fromjson)
              }
            }')

          # Send to SOAR platform
          curl -X POST \
            -H "Authorization: Bearer $SOAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$CONTAINMENT_PAYLOAD" \
            "${{ env.SOAR_API_URL }}/containment"

          echo "SOAR containment triggered for critical vulnerabilities"
