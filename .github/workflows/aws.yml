name: Security Scan & ECS Connection Test
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: uba-ds-validator
  ECS_CLUSTER: uba-ds-cluster
  ECS_SERVICE: uba-validator-service

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker Image Security Scan
      - name: Scan with Anchore
        uses: anchore/scan-action@v3
        with:
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          fail-build: false
          severity-cutoff: high

      # Infrastructure Security Scan
      - name: Terraform Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          quiet: true

      # Dependency Scanning
      - name: Dependency Check
        uses: actions/dependency-review-action@v2

  test-ecs-connection:
    name: Test ECS Connection
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Verify ECS cluster accessibility
      - name: Check ECS Cluster Status
        run: |
          aws ecs describe-clusters \
            --clusters ${{ env.ECS_CLUSTER }} \
            --query 'clusters[0].status' \
            --output text
          
          echo "Cluster connection successful"

      # Verify service is running
      - name: Check ECS Service Status
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].status' \
            --output text)
          
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "::error::Service is not active (Status: $SERVICE_STATUS)"
            exit 1
          else
            echo "Service is active and running"
          fi

      # Verify tasks are healthy
      - name: Check Running Tasks
        run: |
          RUNNING_TASKS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].runningCount' \
            --output text)
          
          if [ "$RUNNING_TASKS" -eq "0" ]; then
            echo "::error::No tasks running"
            exit 1
          else
            echo "Found $RUNNING_TASKS running tasks"
          fi
