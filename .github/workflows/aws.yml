name: UBA-DS AWS Deployment
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: uba-ds-validator
  ECS_CLUSTER: uba-ds-cluster
  ECS_SERVICE: uba-validator-service
  TASK_DEFINITION: .aws/task-definition.json

jobs:
  build-and-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.value }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate Image Tag
        id: tag
        run: |
          echo "value=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build, Tag, Push
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          docker build -t $ECR_REPOSITORY:${{ steps.tag.outputs.value }} .
          docker tag $ECR_REPOSITORY:${{ steps.tag.outputs.value }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.value }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.value }}

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://${{ steps.alb-dns.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Task Definition
        run: |
          mkdir -p .aws
          aws ecs describe-task-definition --task-definition $ECS_SERVICE \
            --query taskDefinition > $TASK_DEFINITION

      - name: Update Image in Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          container-name: uba-validator
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:${{ needs.build-and-push.outputs.image_tag }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true

      - name: Get ALB DNS
        id: alb-dns
        run: |
          echo "url=$(aws elbv2 describe-load-balancers --names uba-ds-alb --query 'LoadBalancers[0].DNSName' --output text)" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Scan Docker Image
        uses: anchore/scan-action@v3
        with:
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:${{ needs.build-and-push.outputs.image_tag }}
          fail-build: false
          severity-cutoff: critical

      - name: Terraform Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          quiet: true

  notify:
    name: Notify Status
    needs: [deploy, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification
        if: ${{ github.event_name == 'push' }}  # Only notify on push events
        uses: slackapi/slack-github-action@v1
        with:
          slack-message: |
            UBA-DS Deployment ${{ job.status }}
            *Image Tag*: ${{ needs.build-and-push.outputs.image_tag }}
            *Environment*: production
            *URL*: https://${{ needs.deploy.outputs.alb-dns }}
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_BOT_TOKEN }}
